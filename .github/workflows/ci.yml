name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  lint-and-format:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Check formatting
        run: npm run format
      
      - name: Run linter
        run: npm run lint

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node-version: ['18', '20']
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build
        run: npm run build
      
      - name: Run unit tests
        run: npm test
      
      - name: Run Z80 timing tests
        run: npm run test:timing
      
      - name: Run VDP tests
        run: npm run test:vdp
      
      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-report-${{ matrix.os }}-node${{ matrix.node-version }}
          path: test-report.json

  benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build
        run: npm run build
      
      - name: Run benchmark
        run: npm run benchmark
      
      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: benchmark-results.json
      
      - name: Comment PR with benchmark results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('benchmark-results.json', 'utf8'));
            
            // Find frame execution result
            const frameResult = results.results.find(r => r.name === 'Frame Execution');
            const fps = frameResult ? frameResult.opsPerSecond.toFixed(1) : 'N/A';
            const mhz = frameResult && frameResult.mhz ? frameResult.mhz.toFixed(2) : 'N/A';
            
            const comment = `## ðŸ“Š Benchmark Results
            
            - **FPS**: ${fps} (target: 60)
            - **CPU Speed**: ${mhz} MHz (target: 3.58)
            - **Platform**: ${results.system.platform}
            - **Node Version**: ${results.system.nodeVersion}
            
            [View full results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build
        run: npm run build
      
      - name: Run tests with coverage
        run: npm test -- --coverage
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, benchmark]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build
        run: npm run build
      
      - name: Create release artifact
        run: |
          tar -czf sms-emulator.tar.gz dist/ package.json README.md VERIFICATION_GUIDE.md
      
      - name: Upload release artifact
        uses: actions/upload-artifact@v3
        with:
          name: release-build
          path: sms-emulator.tar.gz
